{
  "searchableContent": {
    "concepts": {
      "hats": {
        "description": "Roles or responsibilities with unique IDs, properties like details, max supply, status",
        "keywords": ["role", "permission", "hat", "token", "NFT", "authority"],
        "relatedSections": ["Core Concepts", "Hat Management", "API Reference"]
      },
      "trees": {
        "description": "Hierarchical structures organizing hats with top hat as root",
        "keywords": ["hierarchy", "organization", "structure", "admin", "tree"],
        "relatedSections": ["Tree Queries", "Tree Management", "Linking"]
      },
      "wearers": {
        "description": "Ethereum addresses that hold/wear hats with standing status",
        "keywords": ["holder", "wearer", "user", "address", "standing"],
        "relatedSections": ["Wearer Queries", "Permission Checking"]
      },
      "modules": {
        "description": "Extensible system for eligibility, toggle, and hatter logic",
        "keywords": ["eligibility", "toggle", "hatter", "module", "logic"],
        "relatedSections": ["Module Integration", "Best Practices"]
      }
    },
    "sdk": {
      "installation": {
        "description": "Install SDK via npm/pnpm/yarn with @hatsprotocol/sdk-v1-core",
        "keywords": ["install", "npm", "pnpm", "yarn", "setup"],
        "commands": ["npm install @hatsprotocol/sdk-v1-core"]
      },
      "setup": {
        "description": "Initialize HatsClient with viem clients and chain configuration",
        "keywords": ["setup", "configuration", "client", "viem", "chain"],
        "codeExample": "new HatsClient({ chainId, publicClient, walletClient })"
      },
      "operations": {
        "createHat": {
          "description": "Create new hat under admin with details, supply, modules",
          "parameters": ["admin", "details", "maxSupply", "eligibility", "toggle", "mutable", "imageURI"],
          "keywords": ["create", "new", "hat", "role"]
        },
        "mintHat": {
          "description": "Mint hat to specific wearer address",
          "parameters": ["hatId", "wearer"],
          "keywords": ["mint", "assign", "give", "wearer"]
        },
        "burnHat": {
          "description": "Remove hat from wearer",
          "parameters": ["hatId", "wearer"],
          "keywords": ["burn", "remove", "revoke", "take"]
        },
        "isWearerOfHat": {
          "description": "Check if address currently wears specific hat",
          "parameters": ["wearer", "hatId"],
          "keywords": ["check", "verify", "wearing", "has"]
        }
      }
    },
    "subgraph": {
      "description": "GraphQL API for querying Hats Protocol data efficiently",
      "endpoint": "hats-protocol/hats-v1-mainnet",
      "queryTypes": {
        "trees": {
          "description": "Query tree structures and their hats",
          "examples": ["Get all trees", "Get specific tree", "Tree linking"]
        },
        "hats": {
          "description": "Query hat details, relationships, wearers",
          "examples": ["Basic hat info", "Hat relationships", "Wearer lists"]
        },
        "wearers": {
          "description": "Query wearer data and their hats",
          "examples": ["Get wearer's hats", "Wearer history"]
        },
        "events": {
          "description": "Query historical events and activity",
          "examples": ["Hat creation", "Minting/burning", "Status changes"]
        }
      }
    },
    "patterns": {
      "permissionChecking": {
        "description": "Always check both hat ownership AND good standing",
        "keywords": ["permission", "access", "security", "standing"],
        "bestPractice": "Check isWearerOfHat AND isInGoodStanding"
      },
      "moduleIntegration": {
        "description": "Use eligibility/toggle modules for dynamic logic",
        "keywords": ["dynamic", "conditional", "module", "eligibility", "toggle"],
        "methods": ["isEligible", "isActive"]
      },
      "errorHandling": {
        "description": "Handle common errors like NotAdmin, MaxLevelsReached",
        "keywords": ["error", "exception", "handling", "validation"],
        "commonErrors": ["NotAdmin", "MaxLevelsReached", "InvalidHat"]
      },
      "gasOptimization": {
        "description": "Use multicall for batch operations",
        "keywords": ["gas", "optimization", "batch", "multicall", "efficiency"],
        "method": "multicall"
      }
    },
    "networks": {
      "supported": [
        "Ethereum Mainnet",
        "Polygon",
        "Arbitrum One", 
        "Optimism",
        "Base",
        "Gnosis Chain",
        "Base Sepolia"
      ],
      "testnet": "Base Sepolia",
      "primary": "Ethereum Mainnet"
    }
  },
  "navigation": {
    "gettingStarted": [
      "What is Hats Protocol?",
      "Core Concepts", 
      "SDK Setup",
      "Basic Operations"
    ],
    "development": [
      "SDK API Reference",
      "Subgraph Integration",
      "Common Patterns",
      "Code Examples"
    ],
    "advanced": [
      "Module System",
      "Tree Linking",
      "Event Handling",
      "Gas Optimization"
    ]
  },
  "codeExamples": {
    "quickStart": {
      "description": "Basic setup and hat creation",
      "file": "summary.md",
      "section": "Basic Setup"
    },
    "fullIntegration": {
      "description": "Complete organization management example",
      "file": "summary.md", 
      "section": "Complete Integration Example"
    },
    "subgraphQueries": {
      "description": "GraphQL query patterns",
      "file": "summary.md",
      "section": "Subgraph Integration"
    }
  },
  "troubleshooting": {
    "commonIssues": [
      {
        "issue": "Transaction fails with 'NotAdmin' error",
        "solution": "Ensure the calling address wears the admin hat for the operation",
        "keywords": ["NotAdmin", "permission", "admin"]
      },
      {
        "issue": "Subgraph data out of sync with contract",
        "solution": "Query contract directly for module-dependent state",
        "keywords": ["sync", "module", "eligibility", "toggle"]
      },
      {
        "issue": "High gas costs for batch operations", 
        "solution": "Use multicall to batch multiple operations in single transaction",
        "keywords": ["gas", "batch", "multicall", "cost"]
      }
    ]
  }
}